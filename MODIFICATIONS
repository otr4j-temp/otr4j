New Features:
* State machine for session message state.
  * All encryption logic in single State implementation: StateEncrypted.
  * Logic for each state isolated and bundled with corresponding state.
  * Simplifies logic and improvements managability.
  * Frees up memory for fields that are used only in some states.
  * Enables more fields to be initialized at construction time since they are only constructed in relevant states, enabling final modifier which helps in ensure code correctness.
* State machine for Socialist Millionaire protocol.
  * Fully immutable fields.
  * Atomic state updates.
  * State transitions managed by the states themselves. 
  * Primary state machine state fully managed by state machine. There is no outside interaction with core protocol interaction. SmpTlvHandler handles secondary responsiblities.
  * Implemented as "defensive by default". Any deviation from expectations results in reset and possibly error.
* State machine for AKE states.
* Upgraded BC to version 1.56 (+ strict requirement for at least this version)
* Partly redesigned (slave) session management to be more predictable, less error prone.
  * Should now be able to support even simultaneous OTRv2 and (multiple) OTRv3 sessions.
* Validate receiving counter values before further message handling.

Backwards incompatibility / behavioral changes:
- SM now signals bad messages with 'SM aborted' instead of 'SM error'. (This is according to OTR spec.)
- SM protocol state machine resets to default/initial state whenever an unexpected message is received. (Again, according to OTR spec, was not implemented in otr4j.)
- SerializationUtils.toMessage(body:String) (observed in Xabber)
  * New exception OtrCryptoException thrown.
  * OtrCryptoException was originally wrapped in IOException, so less IOExceptions are thrown.
- Potentially more RuntimeExceptions. Not explicitly thrown, but less are caught with the general catch-all "catch (Exception)".
- Moved classes:
  * net.java.otr4j.OtrSessionManager -> net.java.otr4j.session.OtrSessionManager
- Deleted classes:
  * net.java.otr4j.crypto.Util: was unused and is now deleted.
- Session#getOutgoingInstance --> Session#getOutgoingSession
- Session#setOutgoingInstance --> Session#setOutgoingSession
- Defined API package:
  * OtrEngineHost --> api.OtrEngineHost
  * OtrEngineHostUtil --> api.OtrEngineHostUtil
  * OtrEngineListener --> api.OtrEngineListener
  * OtrEngineListenerUtil --> api.OtrEngineListenerUtil
  * OtrException --> api.OtrException
  * OtrPolicy --> api.OtrPolicy
  * OtrPolicyUtil --> api.OtrPolicyUtil
  * session.InstanceTag --> api.InstanceTag
  * session.OfferStatus --> api.OfferStatus
  * session.Session --> api.Session
  * session.SessionID --> api.SessionID
  * session.SessionStatus --> api.SessionStatus
  * session.TLV --> api.TLV
  * session.state.SmpEngineHost --> api.SmpEngineHost
  * session.state.SmpEngineHostUtil --> api.SmpEngineHostUtil


Modifications in improvements branch:
* More leverage of (static) type-safety.
* More specific exception catching. This might result in more Runtime Exceptions "leaking" through (intentionally).
* Extend size of MPI arrays to maximum Java supported capacity (OTR supports 32 bits lengths, otr4j currently supports up to Integer.MAX_VALUE-8 items.)
* Safely calling listeners such that faulty listener implementations do not interrupt protocol/message processing.
* Safely calling engine host such that faulty engine host implementation does not interrupt session state management:
 * This improvement is especially important as a significant number of calls depend on successful execution and assume that directly after a response can be constructed or state updated. Some cases are:
 * receiving of plain text message: plain text message is returned afterwards.
 * informing of erred/aborted SMP: state is reset afterwards.
 * NOTE that OtrException are technically allowed, but are not handled correctly either. The utility class that is now used, will catch, log and silence OtrException too.
* Fixed potential exceptions due to negative array sizes caused by interpretation of ints as signed in unserialization.
* Fixed issue with SM exponent and group element verification.
* Fix bad parsing of receiver instance id resulting in ids that are discarded as invalid even though they are actually valid values.
* Reduce unnecessary use of null.
* General simplification of code by removing redundant constructions.
* Updated obsolete collections.
* Better synchronization of containers in multi-threaded situations.
* Use of thread-unsafe classes in local context.
* Correct inconsistencies in javadoc/variable naming.
* Better/correct closing of stream resources.
* Smart use of try-finally to ensure correct closing.
* Removed OtrKeyManager* and related code. These are not used in the main otr4j implementation. Its function is already provided by OtrEngineHost.
* More use of logging and no more e.printStackTrace() calls that print to stderr.
* Extra argument checking for allowing listeners to be added to collection for later use.
* Fixed bugs in fragment reassembly code. (Previously, could not handle fragments from multiple instances simultaneously.)
* Fixed bug in fragmentation code. (Code relied on policy instead of current negotiated session protocol.)
