/*
 * otr4j, the open source java otr library.
 *
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 */

package net.java.otr4j.messages;

import net.java.otr4j.api.ClientProfile;
import net.java.otr4j.api.InstanceTag;
import net.java.otr4j.api.Session.OTRv;
import net.java.otr4j.crypto.DSAKeyPair;
import net.java.otr4j.crypto.OtrCryptoException;
import net.java.otr4j.crypto.ed448.EdDSAKeyPair;
import net.java.otr4j.crypto.ed448.Point;
import net.java.otr4j.io.OtrInputStream;
import net.java.otr4j.io.OtrOutputStream;
import org.junit.Test;

import java.net.ProtocolException;
import java.security.SecureRandom;

import static java.util.Collections.singleton;
import static net.java.otr4j.crypto.DSAKeyPair.generateDSAKeyPair;
import static net.java.otr4j.messages.ClientProfilePayload.readFrom;
import static net.java.otr4j.messages.ClientProfilePayload.sign;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assume.assumeFalse;

/*
 * NOTES:
 *
 * Encoded profile without DSA public key without DSA transitional signature: 0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0
 * Encoded profile without DSA public key with DSA transitional signature: 0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -116, -66, 116, 34, 83, 86, 77, -56, 121, -124, -39, 107, 24, 23, -73, -59, 3, -69, 81, 113, 43, -84, 50, 106, 117, 7, -3, -83, 82, 68, 125, 13, -110, 15, -14, -82, -117, 111, -55, 48, 46, -114, 9, -34, -24, -37, -46, 106, 56, -18, 21, 11, 106, 60, -82, 59, -128, 0, 3, 0, 18, 93, 104, -128, -78, -30, 120, -42, -127, 36, 48, -113, 108, 36, -19, -69, -91, -92, -65, 59, -73, -49, 12, 27, 18, 88, -53, 50, 53, -86, -107, 57, 29, 49, 72, -86, 63, 123, 74, 97, 81, 79, -8, -63, 58, 32, -80, -13, 81, 50, 86, -23, 115, 105, -67, 11, -13, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 7, 0, 0, 0, 28, 92, 38, 54, -11, -33, 72, -34, -40, -49, -50, -100, 48, -60, -9, 123, -52, 104, -49, -35, -39, 44, 3, -17, 70, 118, 28, -45, 37, 0, 0, 0, 28, 96, 96, -105, 93, 61, -43, 73, 113, 5, 46, 10, 58, -96, -79, 26, 98, -26, -126, -77, -60, -7, 81, 15, 119, 52, 34, 79, -33, -105, -118, -16, -81, -87, 57, 16, -84, -24, 79, -57, 124, 126, 16, 29, -55, 31, 42, 32, -96, -38, 127, 81, -97, 45, 125, -61, 8, 36, 2, 108, 85, -111, 29, 8, -72, -103, -51, -115, -113, -123, 53, 88, -73, 60, -48, -105, 60, 84, 94, -58, 109, 96, -58, 70, -3, 0, -69, 66, 106, 10, -73, -99, -64, -10, 10, -54, -113, -31, 49, -21, -51, 94, -83, -44, 35, 81, -96, 64, 67, -10, -13, -82, -47, -27, -122, 5, 34, 38, 27, -31, -1, -8, -123, 3, 49, 31, -119, 21, -91, -73, -33, 25, -90, -16, -80, 4, 117, 51, 15, -105, 127, 35, 0
 * Encoded profile with DSA public key with DSA transitional signature: 0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -9, 40, 58, -73, -127, -5, 56, 121, 15, 57, 18, 33, -80, 67, -83, -60, -96, -74, -103, -40, 72, 27, -102, 6, 112, 100, -24, -59, 96, -78, -44, 21, -24, 7, 41, -35, -112, -24, 126, 103, 108, 111, 51, 2, 85, -111, -104, -74, -52, 4, -74, 41, -13, 113, 2, -36, -128, 0, 3, 0, 18, 17, -65, 102, -22, -42, -19, -12, 35, 95, 51, -61, 48, -24, 80, -27, 78, 127, -18, 47, -79, -53, 27, 106, 45, 3, 25, -70, 53, -7, 11, -100, -67, 67, 31, -107, -110, 45, 113, 76, -119, 31, 37, 85, -113, -2, 117, 126, 57, -118, 77, -112, 107, 101, -25, -85, -97, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 1, 0, -113, 121, 53, -39, -71, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 87, 93, -40, -13, 36, 111, 36, -32, 7, 91, -2, 99, -5, 85, -25, -73, 73, -29, -69, 110, 83, -12, -126, 28, 103, 35, 106, 83, 83, -85, 74, -16, -57, -62, -34, -98, 50, -4, -96, -10, -81, -41, 62, -15, 88, 9, -8, -81, 102, -45, 109, -22, -47, 107, 15, -57, 84, -46, 6, -46, -94, -40, 41, 86, 97, 60, -101, -12, 114, 86, 66, 94, 120, -64, 120, -113, -57, 49, -83, 25, 55, -55, 87, -124, -125, -68, -101, -1, -20, 70, 67, 56, -109, 122, -10, -86, -70, -111, 105, -116, 18, -23, -90, -57, 85, -31, 27, -126, -49, -49, 125, -126, -127, -73, -128, -24, -2, -104, 34, 121, -58, -54, 125, 58, -39, -15, 124, 114, 5, 22, -125, -46, -81, -79, -17, -106, 65, 105, -16, -49, 110, 93, 113, 77, 108, 49, -11, 91, 19, 127, -11, -24, 49, -32, 44, 109, 3, 109, 10, -120, 43, -29, 64, -25, 78, -28, 83, -66, -43, 56, 5, 58, -82, 45, -118, -56, 110, 84, -6, -21, -113, 46, 75, 66, 105, 36, 120, -100, 125, 45, -62, -87, -38, -121, 92, 106, -99, 78, 4, 105, -92, -59, -63, 83, 9, -4, 115, -74, -48, 106, -59, 89, 60, -111, -125, 90, -96, -95, -40, 38, 44, 85, 127, -52, 87, -123, -26, 95, 45, -79, -31, -60, -21, -114, 52, -94, 61, -91, -22, 16, -123, -46, -73, -11, -78, -92, -117, 68, -78, 121, 33, -57, -74, -30, 109, 32, 0, 7, 0, 0, 0, 28, -84, -7, 69, 79, -23, -122, 30, 41, 102, -1, -37, 68, 76, 48, -49, 20, -17, 123, 14, -102, 121, 19, 72, 125, -59, -91, -6, -24, 0, 0, 0, 28, 18, 54, -26, -38, 58, 10, 29, 14, -88, -125, -55, 69, 49, 22, 108, 32, -37, 105, -45, -8, 30, -74, -56, 63, -28, -87, 120, 116, -81, -70, 32, -102, 101, -69, -79, 108, -92, 14, -94, -42, 116, -73, 83, -45, 27, -42, 38, 77, 84, -64, -81, -74, 66, 80, 118, -91, -81, -80, -74, 8, -16, -6, -53, -98, -69, 113, 17, -29, -28, -127, -117, 66, 6, -30, 22, -83, 60, 2, 45, 95, -126, 125, -99, -3, 0, -15, 127, -56, 120, 92, 33, 12, 112, 50, -82, 102, 108, -81, -24, -73, 107, -55, 113, 13, 44, 58, -67, 46, -14, -125, 47, 107, -43, 13, -3, 22, 109, 18, -36, 0, 0, 98, 99, -19, 37, -114, -45, 77, -117, 47, 122, -77, -79, 68, -110, -127, -54, 50, 79, 98, 37, 0
 */

@SuppressWarnings("ConstantConditions")
public final class ClientProfilePayloadTest {

    private static final SecureRandom RANDOM = new SecureRandom();

    private final InstanceTag tag = InstanceTag.SMALLEST_TAG;

    private final EdDSAKeyPair keypair = EdDSAKeyPair.generate(RANDOM);

    private final Point forgingKey = EdDSAKeyPair.generate(RANDOM).getPublicKey();

    private final DSAKeyPair dsaKeyPair = generateDSAKeyPair();

    @Test
    public void testConstructedPayloadIsReversible() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                null);
        assertEquals(profile, sign(profile, Long.MAX_VALUE / 1000, null, keypair).validate());
    }

    @Test
    public void testConstructedPayloadWithDSAIsReversible() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                this.dsaKeyPair.getPublic());
        assertEquals(profile, sign(profile, Long.MAX_VALUE / 1000, dsaKeyPair, keypair).validate());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructedPayloadWithDSAPublicKeyWithoutDSASignature() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                this.dsaKeyPair.getPublic());
        assertEquals(profile, sign(profile, Long.MAX_VALUE / 1000, null, keypair).validate());
    }

    @Test
    public void testConstructedPayloadWithoutDSAPublicKeyWithDSASignature() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                null);
        assertEquals(profile, sign(profile, Long.MAX_VALUE / 1000, this.dsaKeyPair, keypair).validate());
    }

    @Test(expected = NullPointerException.class)
    public void testSignNullProfile() {
        sign(null, Long.MAX_VALUE / 1000, null, this.keypair);
    }

    @Test(expected = AssertionError.class)
    public void testSignProfileZeroTimestamp() {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                null);
        sign(profile, 0, null, this.keypair);
    }

    @Test(expected = NullPointerException.class)
    public void testSignNullKeypair() {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                null);
        sign(profile, Long.MAX_VALUE / 1000, null, null);
    }

    @Test
    public void testReadingWrittenClientProfilePayload() throws OtrCryptoException, ProtocolException, ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                null);
        final ClientProfilePayload payload = sign(profile, Long.MAX_VALUE / 1000, null, keypair);
        final OtrOutputStream out = new OtrOutputStream();
        payload.writeTo(out);
        final ClientProfilePayload parsedPayload = readFrom(new OtrInputStream(out.toByteArray()));
        assertEquals(payload, parsedPayload);
    }

    @Test
    public void testReadingWrittenClientProfilePayloadWithDSA() throws OtrCryptoException, ProtocolException, ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                this.dsaKeyPair.getPublic());
        final ClientProfilePayload payload = sign(profile, Long.MAX_VALUE / 1000, this.dsaKeyPair, keypair);
        final OtrOutputStream out = new OtrOutputStream();
        payload.writeTo(out);
        final ClientProfilePayload parsedPayload = readFrom(new OtrInputStream(out.toByteArray()));
        assertEquals(payload, parsedPayload);
    }

    @Test
    public void testWriteClientProfilePayload() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        final OtrOutputStream out = new OtrOutputStream();
        readFrom(new OtrInputStream(input)).writeTo(out);
        assertArrayEquals(input, out.toByteArray());
    }

    @Test(expected = ProtocolException.class)
    public void testReadFieldMissingAccordingToInitialData() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTooFewFieldsAccordingToInitialData() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadIllegalInstanceTag() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 0, (byte) 0xff, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadIllegalTypeForEdDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 17, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = OtrCryptoException.class)
    public void testReadIllegalEdDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80 | 1, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = OtrCryptoException.class)
    public void testReadIllegalContentForEdDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, 92, 124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadIllegalTypeForForgingKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 17, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = OtrCryptoException.class)
    public void testReadIllegalContentForForgingKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -77, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadIllegalVersionStringTooLow() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 51, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadIllegalVersionStringTooHigh() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 59, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadModifedTimeStamp() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 31, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadOutdatedTimestamp() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 0, 0, 0, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedSignature() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 15, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedSignatureRandomMutation() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        final int index = input.length - 114 + RANDOM.nextInt(114);
        final byte prev = input[index];
        input[index] = (byte) RANDOM.nextInt(255);
        assumeFalse("Random mutation made no actual change, so final result will be correct.", input[index] == prev);
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadInstanceTagFieldsWithZeroValue() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoInstanceTagFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingInstanceTagFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoPublicKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingPublicKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadUnsupportedLengthVersionsString() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoVersionsString() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingVersionsString() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadUnsupportedFieldType() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 1, 2, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadZeroFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoForgingKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingForgingKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadUnsupportedDSAPublicKeyType() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedDSASignatureComponent1() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedDSASignatureComponent2() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -9, 40, 58, -73, -127, -5, 56, 121, 15, 57, 18, 33, -80, 67, -83, -60, -96, -74, -103, -40, 72, 27, -102, 6, 112, 100, -24, -59, 96, -78, -44, 21, -24, 7, 41, -35, -112, -24, 126, 103, 108, 111, 51, 2, 85, -111, -104, -74, -52, 4, -74, 41, -13, 113, 2, -36, -128, 0, 3, 0, 18, 17, -65, 102, -22, -42, -19, -12, 35, 95, 51, -61, 48, -24, 80, -27, 78, 127, -18, 47, -79, -53, 27, 106, 45, 3, 25, -70, 53, -7, 11, -100, -67, 67, 31, -107, -110, 45, 113, 76, -119, 31, 37, 85, -113, -2, 117, 126, 57, -118, 77, -112, 107, 101, -25, -85, -97, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 1, 0, -113, 121, 53, -39, -71, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 87, 93, -40, -13, 36, 111, 36, -32, 7, 91, -2, 99, -5, 85, -25, -73, 73, -29, -69, 110, 83, -12, -126, 28, 103, 35, 106, 83, 83, -85, 74, -16, -57, -62, -34, -98, 50, -4, -96, -10, -81, -41, 62, -15, 88, 9, -8, -81, 102, -45, 109, -22, -47, 107, 15, -57, 84, -46, 6, -46, -94, -40, 41, 86, 97, 60, -101, -12, 114, 86, 66, 94, 120, -64, 120, -113, -57, 49, -83, 25, 55, -55, 87, -124, -125, -68, -101, -1, -20, 70, 67, 56, -109, 122, -10, -86, -70, -111, 105, -116, 18, -23, -90, -57, 85, -31, 27, -126, -49, -49, 125, -126, -127, -73, -128, -24, -2, -104, 34, 121, -58, -54, 125, 58, -39, -15, 124, 114, 5, 22, -125, -46, -81, -79, -17, -106, 65, 105, -16, -49, 110, 93, 113, 77, 108, 49, -11, 91, 19, 127, -11, -24, 49, -32, 44, 109, 3, 109, 10, -120, 43, -29, 64, -25, 78, -28, 83, -66, -43, 56, 5, 58, -82, 45, -118, -56, 110, 84, -6, -21, -113, 46, 75, 66, 105, 36, 120, -100, 125, 45, -62, -87, -38, -121, 92, 106, -99, 78, 4, 105, -92, -59, -63, 83, 9, -4, 115, -74, -48, 106, -59, 89, 60, -111, -125, 90, -96, -95, -40, 38, 44, 85, 127, -52, 87, -123, -26, 95, 45, -79, -31, -60, -21, -114, 52, -94, 61, -91, -22, 16, -123, -46, -73, -11, -78, -92, -117, 68, -78, 121, 33, -57, -74, -30, 109, 32, 0, 7, 0, 0, 0, 28, -84, -7, 69, 79, -23, -122, 30, 41, 102, -1, -37, 68, 76, 48, -49, 20, -17, 123, 14, -102, 121, 19, 72, 125, -59, -91, -6, -24, 0, 0, 0, 28, 18, 58, -26, -38, 58, 10, 29, 14, -88, -125, -55, 69, 49, 22, 108, 32, -37, 105, -45, -8, 30, -74, -56, 63, -28, -87, 120, 116, -81, -70, 32, -102, 101, -69, -79, 108, -92, 14, -94, -42, 116, -73, 83, -45, 27, -42, 38, 77, 84, -64, -81, -74, 66, 80, 118, -91, -81, -80, -74, 8, -16, -6, -53, -98, -69, 113, 17, -29, -28, -127, -117, 66, 6, -30, 22, -83, 60, 2, 45, 95, -126, 125, -99, -3, 0, -15, 127, -56, 120, 92, 33, 12, 112, 50, -82, 102, 108, -81, -24, -73, 107, -55, 113, 13, 44, 58, -67, 46, -14, -125, 47, 107, -43, 13, -3, 22, 109, 18, -36, 0, 0, 98, 99, -19, 37, -114, -45, 77, -117, 47, 122, -77, -79, 68, -110, -127, -54, 50, 79, 98, 37, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoDSAPublicKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {};
        readFrom(new OtrInputStream(input));
    }

    @Test
    public void testReadProfileWithTransitionalSignatureWithoutDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -116, -66, 116, 34, 83, 86, 77, -56, 121, -124, -39, 107, 24, 23, -73, -59, 3, -69, 81, 113, 43, -84, 50, 106, 117, 7, -3, -83, 82, 68, 125, 13, -110, 15, -14, -82, -117, 111, -55, 48, 46, -114, 9, -34, -24, -37, -46, 106, 56, -18, 21, 11, 106, 60, -82, 59, -128, 0, 3, 0, 18, 93, 104, -128, -78, -30, 120, -42, -127, 36, 48, -113, 108, 36, -19, -69, -91, -92, -65, 59, -73, -49, 12, 27, 18, 88, -53, 50, 53, -86, -107, 57, 29, 49, 72, -86, 63, 123, 74, 97, 81, 79, -8, -63, 58, 32, -80, -13, 81, 50, 86, -23, 115, 105, -67, 11, -13, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 7, 0, 0, 0, 28, 92, 38, 54, -11, -33, 72, -34, -40, -49, -50, -100, 48, -60, -9, 123, -52, 104, -49, -35, -39, 44, 3, -17, 70, 118, 28, -45, 37, 0, 0, 0, 28, 96, 96, -105, 93, 61, -43, 73, 113, 5, 46, 10, 58, -96, -79, 26, 98, -26, -126, -77, -60, -7, 81, 15, 119, 52, 34, 79, -33, -105, -118, -16, -81, -87, 57, 16, -84, -24, 79, -57, 124, 126, 16, 29, -55, 31, 42, 32, -96, -38, 127, 81, -97, 45, 125, -61, 8, 36, 2, 108, 85, -111, 29, 8, -72, -103, -51, -115, -113, -123, 53, 88, -73, 60, -48, -105, 60, 84, 94, -58, 109, 96, -58, 70, -3, 0, -69, 66, 106, 10, -73, -99, -64, -10, 10, -54, -113, -31, 49, -21, -51, 94, -83, -44, 35, 81, -96, 64, 67, -10, -13, -82, -47, -27, -122, 5, 34, 38, 27, -31, -1, -8, -123, 3, 49, 31, -119, 21, -91, -73, -33, 25, -90, -16, -80, 4, 117, 51, 15, -105, 127, 35, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoDSASignatureFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingDSASignatureFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -9, 40, 58, -73, -127, -5, 56, 121, 15, 57, 18, 33, -80, 67, -83, -60, -96, -74, -103, -40, 72, 27, -102, 6, 112, 100, -24, -59, 96, -78, -44, 21, -24, 7, 41, -35, -112, -24, 126, 103, 108, 111, 51, 2, 85, -111, -104, -74, -52, 4, -74, 41, -13, 113, 2, -36, -128, 0, 3, 0, 18, 17, -65, 102, -22, -42, -19, -12, 35, 95, 51, -61, 48, -24, 80, -27, 78, 127, -18, 47, -79, -53, 27, 106, 45, 3, 25, -70, 53, -7, 11, -100, -67, 67, 31, -107, -110, 45, 113, 76, -119, 31, 37, 85, -113, -2, 117, 126, 57, -118, 77, -112, 107, 101, -25, -85, -97, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 1, 0, -113, 121, 53, -39, -71, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 87, 93, -40, -13, 36, 111, 36, -32, 7, 91, -2, 99, -5, 85, -25, -73, 73, -29, -69, 110, 83, -12, -126, 28, 103, 35, 106, 83, 83, -85, 74, -16, -57, -62, -34, -98, 50, -4, -96, -10, -81, -41, 62, -15, 88, 9, -8, -81, 102, -45, 109, -22, -47, 107, 15, -57, 84, -46, 6, -46, -94, -40, 41, 86, 97, 60, -101, -12, 114, 86, 66, 94, 120, -64, 120, -113, -57, 49, -83, 25, 55, -55, 87, -124, -125, -68, -101, -1, -20, 70, 67, 56, -109, 122, -10, -86, -70, -111, 105, -116, 18, -23, -90, -57, 85, -31, 27, -126, -49, -49, 125, -126, -127, -73, -128, -24, -2, -104, 34, 121, -58, -54, 125, 58, -39, -15, 124, 114, 5, 22, -125, -46, -81, -79, -17, -106, 65, 105, -16, -49, 110, 93, 113, 77, 108, 49, -11, 91, 19, 127, -11, -24, 49, -32, 44, 109, 3, 109, 10, -120, 43, -29, 64, -25, 78, -28, 83, -66, -43, 56, 5, 58, -82, 45, -118, -56, 110, 84, -6, -21, -113, 46, 75, 66, 105, 36, 120, -100, 125, 45, -62, -87, -38, -121, 92, 106, -99, 78, 4, 105, -92, -59, -63, 83, 9, -4, 115, -74, -48, 106, -59, 89, 60, -111, -125, 90, -96, -95, -40, 38, 44, 85, 127, -52, 87, -123, -26, 95, 45, -79, -31, -60, -21, -114, 52, -94, 61, -91, -22, 16, -123, -46, -73, -11, -78, -92, -117, 68, -78, 121, 33, -57, -74, -30, 109, 32, -81, -70, 32, -102, 101, -69, -79, 108, -92, 14, -94, -42, 116, -73, 83, -45, 27, -42, 38, 77, 84, -64, -81, -74, 66, 80, 118, -91, -81, -80, -74, 8, -16, -6, -53, -98, -69, 113, 17, -29, -28, -127, -117, 66, 6, -30, 22, -83, 60, 2, 45, 95, -126, 125, -99, -3, 0, -15, 127, -56, 120, 92, 33, 12, 112, 50, -82, 102, 108, -81, -24, -73, 107, -55, 113, 13, 44, 58, -67, 46, -14, -125, 47, 107, -43, 13, -3, 22, 109, 18, -36, 0, 0, 98, 99, -19, 37, -114, -45, 77, -117, 47, 122, -77, -79, 68, -110, -127, -54, 50, 79, 98, 37, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test
    public void testReadReorderedFieldsInProfile1() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {};
        readFrom(new OtrInputStream(input));
    }

    @Test
    public void testReadReorderedFieldsInProfile2() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 3, 0, 18, 13, -115, -22, 93, 29, -56, 56, 66, -39, -63, 44, -91, -7, 6, 67, -97, -37, -105, -31, -65, -123, 91, 40, -30, -49, 61, 51, -49, -35, -3, -95, -80, -123, 111, 73, -89, -123, -96, 29, -48, 24, 16, 109, -118, -61, -128, 71, 1, -72, -103, -62, -16, -84, 1, -64, -4, 0, 0, 2, 0, 16, -22, 21, -24, -65, -89, -52, 111, 8, -117, 53, 2, -110, -108, 53, -94, 60, 6, -9, 31, -50, -23, -110, -11, -102, -61, -1, -37, -69, 90, 67, 76, 20, -91, -70, -108, -75, 15, 11, 34, -8, 68, 90, 114, -98, 82, 121, -35, 35, 49, -99, -24, 90, -15, 70, -120, -81, 0, 0, 4, 0, 0, 0, 1, 52, 0, 1, 0, 0, 1, 0, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 7, 0, 0, 0, 28, 62, -40, -89, 110, -40, 89, 33, 0, -80, -86, 104, 23, 2, 56, 59, 2, 54, -85, -13, -10, -78, 82, -84, -105, 20, -126, 79, 103, 0, 0, 0, 28, 73, 104, 0, 31, 68, -65, 100, -119, -32, -70, 62, 11, 117, 66, -68, -17, -48, -21, 40, 77, -95, -49, -120, 29, -16, -48, 102, -30, -103, -31, 8, 88, 121, -123, 109, 7, -73, 22, -94, 45, 67, -21, -89, 23, -74, -43, -36, 113, 127, -65, -93, 62, -46, 107, -81, 60, 13, -57, 82, 15, -19, -84, -48, 76, -37, 16, -85, -55, -61, 21, 36, 39, 100, 86, 99, 14, 6, -2, -11, -59, -23, 64, 109, 62, 0, -117, 8, -98, -106, 72, -112, 97, -98, -18, 1, 67, 119, 46, -58, 108, 62, -91, 9, 81, -17, -24, 72, 51, 37, -97, 104, 119, 78, -45, -110, -12, 127, -99, 53, -91, 43, 95, -76, -108, -117, 53, -14, -102, -75, -58, 98, 63, 36, -77, 88, 106, -78, -122, 101, -50, 4, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test
    public void testReadReorderedFieldsInProfile3() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 3, 0, 18, -89, 7, -57, 30, -5, -32, -76, 78, -42, -91, -7, 90, 119, -57, -41, -35, 51, -9, 71, 25, -106, 105, -42, -86, -19, -11, 39, -86, -6, 46, -115, -56, -17, 46, 97, 77, -30, 45, -17, -119, 105, -54, -60, -100, 15, -125, -54, 43, -27, -8, 52, -4, 108, -44, 25, 124, -128, 0, 2, 0, 16, -62, 115, -34, -32, 17, -118, -18, -21, 79, -25, -16, -127, 53, -44, -48, -6, 101, -73, -2, -68, 9, 37, -113, 44, -85, 94, -100, -122, -107, -40, 81, 61, 60, -12, -61, -27, -70, 105, 58, 1, -111, 35, 116, 122, -124, 14, 34, -61, -81, 24, 67, -114, -37, -107, 116, 8, -128, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 0, 1, 52, 7, 42, -32, 5, 65, 111, 7, 10, -96, -7, -66, -45, -126, -3, 107, 72, 76, 37, -73, 123, -19, -49, -8, -27, 88, -60, 2, -72, -35, 123, 69, 44, 17, 1, 58, 48, 54, 123, -44, -58, 84, 111, -21, -89, -42, 45, 27, -17, 34, 127, 21, 76, 122, -83, 42, -101, 0, 32, 32, 2, 115, -109, -61, -56, 41, 75, 96, 114, 101, -121, -95, 6, -60, -61, 33, 99, -9, 53, 104, 6, -90, 113, 44, -95, 50, 120, 46, -98, 95, -52, 60, -114, 96, -16, 65, -95, 114, -50, 81, -94, -18, -50, -35, 107, 82, -60, 54, -46, 35, -40, 110, 52, 51, 0};
        readFrom(new OtrInputStream(input));
    }
}