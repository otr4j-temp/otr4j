package net.java.otr4j.messages;

import net.java.otr4j.api.ClientProfile;
import net.java.otr4j.api.InstanceTag;
import net.java.otr4j.api.Session.OTRv;
import net.java.otr4j.crypto.OtrCryptoEngine;
import net.java.otr4j.crypto.OtrCryptoException;
import net.java.otr4j.crypto.ed448.EdDSAKeyPair;
import net.java.otr4j.crypto.ed448.Point;
import net.java.otr4j.io.OtrInputStream;
import net.java.otr4j.io.OtrOutputStream;
import org.junit.Test;

import java.net.ProtocolException;
import java.security.KeyPair;
import java.security.SecureRandom;
import java.security.interfaces.DSAPrivateKey;
import java.security.interfaces.DSAPublicKey;

import static java.util.Collections.singleton;
import static net.java.otr4j.messages.ClientProfilePayload.readFrom;
import static net.java.otr4j.messages.ClientProfilePayload.sign;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assume.assumeFalse;

@SuppressWarnings("ConstantConditions")
public final class ClientProfilePayloadTest {

    private static final SecureRandom RANDOM = new SecureRandom();

    private final InstanceTag tag = InstanceTag.SMALLEST_TAG;

    private final EdDSAKeyPair keypair = EdDSAKeyPair.generate(RANDOM);

    private final Point forgingKey = EdDSAKeyPair.generate(RANDOM).getPublicKey();

    private final KeyPair dsaKeyPair = OtrCryptoEngine.generateDSAKeyPair();

    @Test
    public void testConstructedPayloadIsReversible() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                System.currentTimeMillis() / 1000 + 86400, null);
        assertEquals(profile, sign(profile, null, keypair).validate());
    }

    @Test
    public void testConstructedPayloadWithDSAIsReversible() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                System.currentTimeMillis() / 1000 + 86400, (DSAPublicKey) this.dsaKeyPair.getPublic());
        assertEquals(profile, sign(profile, (DSAPrivateKey) dsaKeyPair.getPrivate(),
                keypair).validate());
    }

    @Test(expected = IllegalStateException.class)
    public void testConstructedPayloadWithDSAWithoutDSASignature() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                System.currentTimeMillis() / 1000 + 86400, (DSAPublicKey) this.dsaKeyPair.getPublic());
        assertEquals(profile, sign(profile, null, keypair).validate());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructedPayloadWithoutDSAPublicKeyWithDSASignature() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                System.currentTimeMillis() / 1000 + 86400, null);
        assertEquals(profile, sign(profile, (DSAPrivateKey) this.dsaKeyPair.getPrivate(), keypair).validate());
    }

    @Test(expected = NullPointerException.class)
    public void testSignNullProfile() {
        sign(null, null, this.keypair);
    }

    @Test(expected = NullPointerException.class)
    public void testSignNullKeypair() {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                System.currentTimeMillis() / 1000 + 86400, null);
        sign(profile, null, null);
    }

    @Test
    public void testReadingWrittenClientProfilePayload() throws OtrCryptoException, ProtocolException, ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                System.currentTimeMillis() / 1000 + 86400, null);
        final ClientProfilePayload payload = sign(profile, null, keypair);
        final OtrOutputStream out = new OtrOutputStream();
        payload.writeTo(out);
        final ClientProfilePayload parsedPayload = readFrom(new OtrInputStream(out.toByteArray()));
        assertEquals(payload, parsedPayload);
    }

    @Test
    public void testReadingWrittenClientProfilePayloadWithDSA() throws OtrCryptoException, ProtocolException, ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singleton(OTRv.FOUR),
                System.currentTimeMillis() / 1000 + 86400, (DSAPublicKey) this.dsaKeyPair.getPublic());
        final ClientProfilePayload payload = sign(profile, (DSAPrivateKey) this.dsaKeyPair.getPrivate(), keypair);
        final OtrOutputStream out = new OtrOutputStream();
        payload.writeTo(out);
        final ClientProfilePayload parsedPayload = readFrom(new OtrInputStream(out.toByteArray()));
        assertEquals(payload, parsedPayload);
    }

    @Test
    public void testWriteClientProfilePayload() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        final OtrOutputStream out = new OtrOutputStream();
        readFrom(new OtrInputStream(input)).writeTo(out);
        assertArrayEquals(input, out.toByteArray());
    }

    @Test
    public void testReadBackClientProfilePayload() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        final ClientProfilePayload payload = readFrom(new OtrInputStream(input));
        payload.validate();
    }

    @Test(expected = ProtocolException.class)
    public void testReadFieldMissingAccordingToInitialData() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTooFewFieldsAccordingToInitialData() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadIllegalInstanceTag() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 0, (byte) 0xff, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ProtocolException.class)
    public void testReadIllegalTypeForEdDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 17, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = OtrCryptoException.class)
    public void testReadIllegalEdDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28 | 1, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadIllegalContentForEdDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -29, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ProtocolException.class)
    public void testReadIllegalTypeForForgingKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 19, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadIllegalContentForForgingKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadIllegalVersionString() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 53, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadModifedTimeStamp() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -45, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadOutdatedTimestamp() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 0, 0, 0, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedSignature() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -91, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedSignatureRandomMutation() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        final int index = input.length - 114 + RANDOM.nextInt(114);
        final byte prev = input[index];
        input[index] = (byte) RANDOM.nextInt(255);
        assumeFalse("Random mutation made no actual change, so final result will be correct.", input[index] == prev);
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadInstanceTagFieldsWithZeroValue() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoInstanceTagFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingInstanceTagFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoPublicKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingPublicKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ProtocolException.class)
    public void testReadUnsupportedLengthVersionsString() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoVersionsString() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 4, 0, 0, 0, 1, 53, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingVersionsString() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ProtocolException.class)
    public void testReadUnsupportedFieldType() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 1, 2, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ProtocolException.class)
    public void testReadZeroFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 0, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoForgingKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 3, 0, 18, -110, -88, 20, -50, 24, 14, 36, -38, -79, -13, -100, 109, -83, -73, 33, -51, -7, 53, -116, 50, -78, -92, 63, 75, 42, 87, 69, 84, 56, -94, -9, 29, 27, 125, 43, 40, 21, 119, 88, -29, 79, -36, 17, 26, -63, -126, 75, -32, 52, -59, -114, -52, -23, 87, -23, -39, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingForgingKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -28, -31, -63, -70, 45, -123, 81, 112, 23, -89, 119, -28, 44, -53, 62, 41, 51, -101, -23, 19, -18, 8, 23, 94, -78, 113, 82, -71, 62, 6, 57, -103, -128, 65, -35, -53, -68, -9, -86, -29, 108, -48, 101, -83, 101, 27, -84, -56, -6, -65, -70, -68, 6, 20, 40, -43, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -79, -88, -90, -36, 70, 39, -87, 51, 26, 125, -37, -112, 122, -95, 119, 29, 35, 126, 67, -84, 41, 125, -6, 48, -112, 12, 35, -21, -128, -86, -3, -38, 63, -35, -10, -48, -57, -53, 78, 41, -61, -48, -15, 39, -123, -112, 122, 7, 109, -13, 11, -47, 28, -107, -31, 39, 66, 125, 0, -62, -80, 31, -73, 29, -54, 10, 29, -108, -128, 27, 55, -128, 90, -49, 117, 65, 99, 23, 37, 88, 10, -82, -36, 30, 121, -100, -108, -13, -13, 114, 125, -47, -122, 56, 89, 86, 58, 4, -114, 76, 98, -7, 99, -71, 27, -63, -5, 89, -86, -126, 121, 73, 104, -4, 16, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ProtocolException.class)
    public void testReadUnsupportedDSAPublicKeyType() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, 12, -67, -92, 2, 81, -83, 126, -105, -38, -16, -114, 19, 90, -125, 69, 59, -52, 37, 86, -90, 28, 122, -19, -39, -1, 72, -107, -52, -2, 61, 16, 98, -14, -26, -22, 60, 6, 64, -32, 48, 18, -64, -62, -68, 12, -43, -28, 83, 31, 14, 74, -34, -28, 33, -94, 23, 0, 0, 3, 0, 18, 93, 30, -115, -108, -1, 38, -90, 7, 11, 92, -48, -61, -87, -80, 39, -118, 81, -76, -90, -107, 95, -31, 112, -75, -9, 56, 1, 25, 39, 8, -37, -63, 76, 65, -46, 57, -42, -80, -12, 14, -55, 67, -115, 13, 37, -24, -77, 68, 103, -15, 19, 66, -120, 76, 105, 17, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -58, -34, 0, 6, 0, 1, 0, 0, 1, 0, -113, 121, 53, -39, -71, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 49, 3, 16, -58, -65, -110, 36, 67, 70, -40, 120, -15, -118, 54, -93, 94, 11, -21, -63, -60, 96, -116, 114, -102, 122, 37, 97, -112, 108, -46, -1, 54, -28, -19, -65, -87, 111, 2, -122, -66, -38, 91, 111, 78, -5, 10, -24, -74, -22, 45, -61, -75, -69, 29, 7, 106, -6, -38, -67, 92, 127, 30, 44, -12, 101, -39, 30, 24, -119, -89, 50, 57, -28, 115, 122, 114, -121, -117, -12, 34, 111, -57, -37, -33, -81, -71, -47, -105, -53, 29, -44, -16, -48, -47, -100, -55, 50, 12, 92, -41, 65, -113, 78, 47, -59, -114, -15, -24, -24, -85, 105, 121, -53, 71, -76, -56, -65, -12, 14, 112, -66, 66, -117, -127, 27, 70, -39, 11, -35, 109, -109, -98, 112, -26, 59, -97, -41, 23, 100, 49, -115, -87, 116, -58, -71, -127, 102, -52, -38, -99, 21, -93, 74, 1, -20, 21, 87, -118, -37, 12, 16, -75, -57, -28, 22, -119, 65, -116, 34, -24, -53, -90, -72, -97, 91, 4, 42, -85, 45, -108, -19, -25, -110, -41, 94, -68, 106, 53, -60, -111, -17, 70, -16, 120, 82, 111, 52, 10, 54, 71, 107, -24, -104, 11, -21, 122, -117, -34, 82, -51, -119, 104, -4, 33, 40, 120, 34, 41, -38, -41, -61, 17, -78, 12, -15, 83, -43, -24, 116, -58, -123, -60, -11, -120, -24, -32, -105, -77, 122, 89, 35, -123, 19, 116, -34, 59, -116, 68, -39, 105, 4, 118, -75, 69, 50, -101, 0, 7, 0, 0, 0, 28, 37, -113, -37, -90, -30, 93, 110, 25, 25, 4, -108, -7, 55, 6, -3, 124, -67, 40, 62, -94, -24, 51, -94, 10, 26, -84, 40, -89, 0, 0, 0, 28, 33, 46, 45, 75, -101, 118, -96, 31, 83, 104, -116, 99, 91, 45, -95, 13, -69, 115, -1, -33, -21, 6, 77, -16, 2, -125, 109, -2, 95, -86, -103, 50, 90, 125, 92, 81, 126, 87, 72, -62, 43, -123, -33, -55, 103, -95, -65, 28, -20, -79, -108, -66, 50, -36, 47, -126, -27, -29, 50, 56, -12, -112, -120, -25, 105, 51, 57, 108, -89, -116, 64, 111, 16, 89, 47, -6, 47, -95, 92, -110, 96, -18, -22, -127, 0, -55, -45, 15, -61, 74, 121, -51, 52, -32, -38, 47, -113, -100, -98, 12, 46, 102, 102, 120, -93, -15, -110, -109, -111, -100, 123, -4, 124, 80, 6, -6, -22, 109, -113, -24, 82, -3, 88, -110, 93, -68, -91, -121, 39, -72, -15, -120, 105, -76, -116, 119, -98, 57, -38, -92, 13, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, 12, -67, -92, 2, 81, -83, 126, -105, -38, -16, -114, 19, 90, -125, 69, 59, -52, 37, 86, -90, 28, 122, -19, -39, -1, 72, -107, -52, -2, 61, 16, 98, -14, -26, -22, 60, 6, 64, -32, 48, 18, -64, -62, -68, 12, -43, -28, 83, 31, 14, 74, -34, -28, 33, -94, 23, 0, 0, 3, 0, 18, 93, 30, -115, -108, -1, 38, -90, 7, 11, 92, -48, -61, -87, -80, 39, -118, 81, -76, -90, -107, 95, -31, 112, -75, -9, 56, 1, 25, 39, 8, -37, -63, 76, 65, -46, 57, -42, -80, -12, 14, -55, 67, -115, 13, 37, -24, -77, 68, 103, -15, 19, 66, -120, 76, 105, 17, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -58, -34, 0, 6, 0, 0, 0, 0, 1, 0, -113, 121, 53, -39, -72, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 49, 3, 16, -58, -65, -110, 36, 67, 70, -40, 120, -15, -118, 54, -93, 94, 11, -21, -63, -60, 96, -116, 114, -102, 122, 37, 97, -112, 108, -46, -1, 54, -28, -19, -65, -87, 111, 2, -122, -66, -38, 91, 111, 78, -5, 10, -24, -74, -22, 45, -61, -75, -69, 29, 7, 106, -6, -38, -67, 92, 127, 30, 44, -12, 101, -39, 30, 24, -119, -89, 50, 57, -28, 115, 122, 114, -121, -117, -12, 34, 111, -57, -37, -33, -81, -71, -47, -105, -53, 29, -44, -16, -48, -47, -100, -55, 50, 12, 92, -41, 65, -113, 78, 47, -59, -114, -15, -24, -24, -85, 105, 121, -53, 71, -76, -56, -65, -12, 14, 112, -66, 66, -117, -127, 27, 70, -39, 11, -35, 109, -109, -98, 112, -26, 59, -97, -41, 23, 100, 49, -115, -87, 116, -58, -71, -127, 102, -52, -38, -99, 21, -93, 74, 1, -20, 21, 87, -118, -37, 12, 16, -75, -57, -28, 22, -119, 65, -116, 34, -24, -53, -90, -72, -97, 91, 4, 42, -85, 45, -108, -19, -25, -110, -41, 94, -68, 106, 53, -60, -111, -17, 70, -16, 120, 82, 111, 52, 10, 54, 71, 107, -24, -104, 11, -21, 122, -117, -34, 82, -51, -119, 104, -4, 33, 40, 120, 34, 41, -38, -41, -61, 17, -78, 12, -15, 83, -43, -24, 116, -58, -123, -60, -11, -120, -24, -32, -105, -77, 122, 89, 35, -123, 19, 116, -34, 59, -116, 68, -39, 105, 4, 118, -75, 69, 50, -101, 0, 7, 0, 0, 0, 28, 37, -113, -37, -90, -30, 93, 110, 25, 25, 4, -108, -7, 55, 6, -3, 124, -67, 40, 62, -94, -24, 51, -94, 10, 26, -84, 40, -89, 0, 0, 0, 28, 33, 46, 45, 75, -101, 118, -96, 31, 83, 104, -116, 99, 91, 45, -95, 13, -69, 115, -1, -33, -21, 6, 77, -16, 2, -125, 109, -2, 95, -86, -103, 50, 90, 125, 92, 81, 126, 87, 72, -62, 43, -123, -33, -55, 103, -95, -65, 28, -20, -79, -108, -66, 50, -36, 47, -126, -27, -29, 50, 56, -12, -112, -120, -25, 105, 51, 57, 108, -89, -116, 64, 111, 16, 89, 47, -6, 47, -95, 92, -110, 96, -18, -22, -127, 0, -55, -45, 15, -61, 74, 121, -51, 52, -32, -38, 47, -113, -100, -98, 12, 46, 102, 102, 120, -93, -15, -110, -109, -111, -100, 123, -4, 124, 80, 6, -6, -22, 109, -113, -24, 82, -3, 88, -110, 93, -68, -91, -121, 39, -72, -15, -120, 105, -76, -116, 119, -98, 57, -38, -92, 13, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedDSASignatureComponent1() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, 12, -67, -92, 2, 81, -83, 126, -105, -38, -16, -114, 19, 90, -125, 69, 59, -52, 37, 86, -90, 28, 122, -19, -39, -1, 72, -107, -52, -2, 61, 16, 98, -14, -26, -22, 60, 6, 64, -32, 48, 18, -64, -62, -68, 12, -43, -28, 83, 31, 14, 74, -34, -28, 33, -94, 23, 0, 0, 3, 0, 18, 93, 30, -115, -108, -1, 38, -90, 7, 11, 92, -48, -61, -87, -80, 39, -118, 81, -76, -90, -107, 95, -31, 112, -75, -9, 56, 1, 25, 39, 8, -37, -63, 76, 65, -46, 57, -42, -80, -12, 14, -55, 67, -115, 13, 37, -24, -77, 68, 103, -15, 19, 66, -120, 76, 105, 17, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -58, -34, 0, 6, 0, 0, 0, 0, 1, 0, -113, 121, 53, -39, -71, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 49, 3, 16, -58, -65, -110, 36, 67, 70, -40, 120, -15, -118, 54, -93, 94, 11, -21, -63, -60, 96, -116, 114, -102, 122, 37, 97, -112, 108, -46, -1, 54, -28, -19, -65, -87, 111, 2, -122, -66, -38, 91, 111, 78, -5, 10, -24, -74, -22, 45, -61, -75, -69, 29, 7, 106, -6, -38, -67, 92, 127, 30, 44, -12, 101, -39, 30, 24, -119, -89, 50, 57, -28, 115, 122, 114, -121, -117, -12, 34, 111, -57, -37, -33, -81, -71, -47, -105, -53, 29, -44, -16, -48, -47, -100, -55, 50, 12, 92, -41, 65, -113, 78, 47, -59, -114, -15, -24, -24, -85, 105, 121, -53, 71, -76, -56, -65, -12, 14, 112, -66, 66, -117, -127, 27, 70, -39, 11, -35, 109, -109, -98, 112, -26, 59, -97, -41, 23, 100, 49, -115, -87, 116, -58, -71, -127, 102, -52, -38, -99, 21, -93, 74, 1, -20, 21, 87, -118, -37, 12, 16, -75, -57, -28, 22, -119, 65, -116, 34, -24, -53, -90, -72, -97, 91, 4, 42, -85, 45, -108, -19, -25, -110, -41, 94, -68, 106, 53, -60, -111, -17, 70, -16, 120, 82, 111, 52, 10, 54, 71, 107, -24, -104, 11, -21, 122, -117, -34, 82, -51, -119, 104, -4, 33, 40, 120, 34, 41, -38, -41, -61, 17, -78, 12, -15, 83, -43, -24, 116, -58, -123, -60, -11, -120, -24, -32, -105, -77, 122, 89, 35, -123, 19, 116, -34, 59, -116, 68, -39, 105, 4, 118, -75, 69, 50, -101, 0, 7, 0, 0, 0, 28, 37, -113, -37, -90, -30, 93, 110, 25, 24, 4, -108, -7, 55, 6, -3, 124, -67, 40, 62, -94, -24, 51, -94, 10, 26, -84, 40, -89, 0, 0, 0, 28, 33, 46, 45, 75, -101, 118, -96, 31, 83, 104, -116, 99, 91, 45, -95, 13, -69, 115, -1, -33, -21, 6, 77, -16, 2, -125, 109, -2, 95, -86, -103, 50, 90, 125, 92, 81, 126, 87, 72, -62, 43, -123, -33, -55, 103, -95, -65, 28, -20, -79, -108, -66, 50, -36, 47, -126, -27, -29, 50, 56, -12, -112, -120, -25, 105, 51, 57, 108, -89, -116, 64, 111, 16, 89, 47, -6, 47, -95, 92, -110, 96, -18, -22, -127, 0, -55, -45, 15, -61, 74, 121, -51, 52, -32, -38, 47, -113, -100, -98, 12, 46, 102, 102, 120, -93, -15, -110, -109, -111, -100, 123, -4, 124, 80, 6, -6, -22, 109, -113, -24, 82, -3, 88, -110, 93, -68, -91, -121, 39, -72, -15, -120, 105, -76, -116, 119, -98, 57, -38, -92, 13, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedDSASignatureComponent2() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, 12, -67, -92, 2, 81, -83, 126, -105, -38, -16, -114, 19, 90, -125, 69, 59, -52, 37, 86, -90, 28, 122, -19, -39, -1, 72, -107, -52, -2, 61, 16, 98, -14, -26, -22, 60, 6, 64, -32, 48, 18, -64, -62, -68, 12, -43, -28, 83, 31, 14, 74, -34, -28, 33, -94, 23, 0, 0, 3, 0, 18, 93, 30, -115, -108, -1, 38, -90, 7, 11, 92, -48, -61, -87, -80, 39, -118, 81, -76, -90, -107, 95, -31, 112, -75, -9, 56, 1, 25, 39, 8, -37, -63, 76, 65, -46, 57, -42, -80, -12, 14, -55, 67, -115, 13, 37, -24, -77, 68, 103, -15, 19, 66, -120, 76, 105, 17, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -58, -34, 0, 6, 0, 0, 0, 0, 1, 0, -113, 121, 53, -39, -71, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 49, 3, 16, -58, -65, -110, 36, 67, 70, -40, 120, -15, -118, 54, -93, 94, 11, -21, -63, -60, 96, -116, 114, -102, 122, 37, 97, -112, 108, -46, -1, 54, -28, -19, -65, -87, 111, 2, -122, -66, -38, 91, 111, 78, -5, 10, -24, -74, -22, 45, -61, -75, -69, 29, 7, 106, -6, -38, -67, 92, 127, 30, 44, -12, 101, -39, 30, 24, -119, -89, 50, 57, -28, 115, 122, 114, -121, -117, -12, 34, 111, -57, -37, -33, -81, -71, -47, -105, -53, 29, -44, -16, -48, -47, -100, -55, 50, 12, 92, -41, 65, -113, 78, 47, -59, -114, -15, -24, -24, -85, 105, 121, -53, 71, -76, -56, -65, -12, 14, 112, -66, 66, -117, -127, 27, 70, -39, 11, -35, 109, -109, -98, 112, -26, 59, -97, -41, 23, 100, 49, -115, -87, 116, -58, -71, -127, 102, -52, -38, -99, 21, -93, 74, 1, -20, 21, 87, -118, -37, 12, 16, -75, -57, -28, 22, -119, 65, -116, 34, -24, -53, -90, -72, -97, 91, 4, 42, -85, 45, -108, -19, -25, -110, -41, 94, -68, 106, 53, -60, -111, -17, 70, -16, 120, 82, 111, 52, 10, 54, 71, 107, -24, -104, 11, -21, 122, -117, -34, 82, -51, -119, 104, -4, 33, 40, 120, 34, 41, -38, -41, -61, 17, -78, 12, -15, 83, -43, -24, 116, -58, -123, -60, -11, -120, -24, -32, -105, -77, 122, 89, 35, -123, 19, 116, -34, 59, -116, 68, -39, 105, 4, 118, -75, 69, 50, -101, 0, 7, 0, 0, 0, 28, 37, -113, -37, -90, -30, 93, 110, 25, 25, 4, -108, -7, 55, 6, -3, 124, -67, 40, 62, -94, -24, 51, -94, 10, 26, -84, 40, -89, 0, 0, 0, 28, 33, 47, 45, 75, -101, 118, -96, 31, 83, 104, -116, 99, 91, 45, -95, 13, -69, 115, -1, -33, -21, 6, 77, -16, 2, -125, 109, -2, 95, -86, -103, 50, 90, 125, 92, 81, 126, 87, 72, -62, 43, -123, -33, -55, 103, -95, -65, 28, -20, -79, -108, -66, 50, -36, 47, -126, -27, -29, 50, 56, -12, -112, -120, -25, 105, 51, 57, 108, -89, -116, 64, 111, 16, 89, 47, -6, 47, -95, 92, -110, 96, -18, -22, -127, 0, -55, -45, 15, -61, 74, 121, -51, 52, -32, -38, 47, -113, -100, -98, 12, 46, 102, 102, 120, -93, -15, -110, -109, -111, -100, 123, -4, 124, 80, 6, -6, -22, 109, -113, -24, 82, -3, 88, -110, 93, -68, -91, -121, 39, -72, -15, -120, 105, -76, -116, 119, -98, 57, -38, -92, 13, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoDSAPublicKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 8, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, 12, -67, -92, 2, 81, -83, 126, -105, -38, -16, -114, 19, 90, -125, 69, 59, -52, 37, 86, -90, 28, 122, -19, -39, -1, 72, -107, -52, -2, 61, 16, 98, -14, -26, -22, 60, 6, 64, -32, 48, 18, -64, -62, -68, 12, -43, -28, 83, 31, 14, 74, -34, -28, 33, -94, 23, 0, 0, 3, 0, 18, 93, 30, -115, -108, -1, 38, -90, 7, 11, 92, -48, -61, -87, -80, 39, -118, 81, -76, -90, -107, 95, -31, 112, -75, -9, 56, 1, 25, 39, 8, -37, -63, 76, 65, -46, 57, -42, -80, -12, 14, -55, 67, -115, 13, 37, -24, -77, 68, 103, -15, 19, 66, -120, 76, 105, 17, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -58, -34, 0, 6, 0, 0, 0, 0, 1, 0, -113, 121, 53, -39, -71, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 49, 3, 16, -58, -65, -110, 36, 67, 70, -40, 120, -15, -118, 54, -93, 94, 11, -21, -63, -60, 96, -116, 114, -102, 122, 37, 97, -112, 108, -46, -1, 54, -28, -19, -65, -87, 111, 2, -122, -66, -38, 91, 111, 78, -5, 10, -24, -74, -22, 45, -61, -75, -69, 29, 7, 106, -6, -38, -67, 92, 127, 30, 44, -12, 101, -39, 30, 24, -119, -89, 50, 57, -28, 115, 122, 114, -121, -117, -12, 34, 111, -57, -37, -33, -81, -71, -47, -105, -53, 29, -44, -16, -48, -47, -100, -55, 50, 12, 92, -41, 65, -113, 78, 47, -59, -114, -15, -24, -24, -85, 105, 121, -53, 71, -76, -56, -65, -12, 14, 112, -66, 66, -117, -127, 27, 70, -39, 11, -35, 109, -109, -98, 112, -26, 59, -97, -41, 23, 100, 49, -115, -87, 116, -58, -71, -127, 102, -52, -38, -99, 21, -93, 74, 1, -20, 21, 87, -118, -37, 12, 16, -75, -57, -28, 22, -119, 65, -116, 34, -24, -53, -90, -72, -97, 91, 4, 42, -85, 45, -108, -19, -25, -110, -41, 94, -68, 106, 53, -60, -111, -17, 70, -16, 120, 82, 111, 52, 10, 54, 71, 107, -24, -104, 11, -21, 122, -117, -34, 82, -51, -119, 104, -4, 33, 40, 120, 34, 41, -38, -41, -61, 17, -78, 12, -15, 83, -43, -24, 116, -58, -123, -60, -11, -120, -24, -32, -105, -77, 122, 89, 35, -123, 19, 116, -34, 59, -116, 68, -39, 105, 4, 118, -75, 69, 50, -101, 0, 6, 0, 0, 0, 0, 1, 0, -113, 121, 53, -39, -71, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 49, 3, 16, -58, -65, -110, 36, 67, 70, -40, 120, -15, -118, 54, -93, 94, 11, -21, -63, -60, 96, -116, 114, -102, 122, 37, 97, -112, 108, -46, -1, 54, -28, -19, -65, -87, 111, 2, -122, -66, -38, 91, 111, 78, -5, 10, -24, -74, -22, 45, -61, -75, -69, 29, 7, 106, -6, -38, -67, 92, 127, 30, 44, -12, 101, -39, 30, 24, -119, -89, 50, 57, -28, 115, 122, 114, -121, -117, -12, 34, 111, -57, -37, -33, -81, -71, -47, -105, -53, 29, -44, -16, -48, -47, -100, -55, 50, 12, 92, -41, 65, -113, 78, 47, -59, -114, -15, -24, -24, -85, 105, 121, -53, 71, -76, -56, -65, -12, 14, 112, -66, 66, -117, -127, 27, 70, -39, 11, -35, 109, -109, -98, 112, -26, 59, -97, -41, 23, 100, 49, -115, -87, 116, -58, -71, -127, 102, -52, -38, -99, 21, -93, 74, 1, -20, 21, 87, -118, -37, 12, 16, -75, -57, -28, 22, -119, 65, -116, 34, -24, -53, -90, -72, -97, 91, 4, 42, -85, 45, -108, -19, -25, -110, -41, 94, -68, 106, 53, -60, -111, -17, 70, -16, 120, 82, 111, 52, 10, 54, 71, 107, -24, -104, 11, -21, 122, -117, -34, 82, -51, -119, 104, -4, 33, 40, 120, 34, 41, -38, -41, -61, 17, -78, 12, -15, 83, -43, -24, 116, -58, -123, -60, -11, -120, -24, -32, -105, -77, 122, 89, 35, -123, 19, 116, -34, 59, -116, 68, -39, 105, 4, 118, -75, 69, 50, -101, 0, 7, 0, 0, 0, 28, 37, -113, -37, -90, -30, 93, 110, 25, 25, 4, -108, -7, 55, 6, -3, 124, -67, 40, 62, -94, -24, 51, -94, 10, 26, -84, 40, -89, 0, 0, 0, 28, 33, 46, 45, 75, -101, 118, -96, 31, 83, 104, -116, 99, 91, 45, -95, 13, -69, 115, -1, -33, -21, 6, 77, -16, 2, -125, 109, -2, 95, -86, -103, 50, 90, 125, 92, 81, 126, 87, 72, -62, 43, -123, -33, -55, 103, -95, -65, 28, -20, -79, -108, -66, 50, -36, 47, -126, -27, -29, 50, 56, -12, -112, -120, -25, 105, 51, 57, 108, -89, -116, 64, 111, 16, 89, 47, -6, 47, -95, 92, -110, 96, -18, -22, -127, 0, -55, -45, 15, -61, 74, 121, -51, 52, -32, -38, 47, -113, -100, -98, 12, 46, 102, 102, 120, -93, -15, -110, -109, -111, -100, 123, -4, 124, 80, 6, -6, -22, 109, -113, -24, 82, -3, 88, -110, 93, -68, -91, -121, 39, -72, -15, -120, 105, -76, -116, 119, -98, 57, -38, -92, 13, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingDSAPublicKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, 12, -67, -92, 2, 81, -83, 126, -105, -38, -16, -114, 19, 90, -125, 69, 59, -52, 37, 86, -90, 28, 122, -19, -39, -1, 72, -107, -52, -2, 61, 16, 98, -14, -26, -22, 60, 6, 64, -32, 48, 18, -64, -62, -68, 12, -43, -28, 83, 31, 14, 74, -34, -28, 33, -94, 23, 0, 0, 3, 0, 18, 93, 30, -115, -108, -1, 38, -90, 7, 11, 92, -48, -61, -87, -80, 39, -118, 81, -76, -90, -107, 95, -31, 112, -75, -9, 56, 1, 25, 39, 8, -37, -63, 76, 65, -46, 57, -42, -80, -12, 14, -55, 67, -115, 13, 37, -24, -77, 68, 103, -15, 19, 66, -120, 76, 105, 17, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -58, -34, 0, 7, 0, 0, 0, 28, 37, -113, -37, -90, -30, 93, 110, 25, 25, 4, -108, -7, 55, 6, -3, 124, -67, 40, 62, -94, -24, 51, -94, 10, 26, -84, 40, -89, 0, 0, 0, 28, 33, 46, 45, 75, -101, 118, -96, 31, 83, 104, -116, 99, 91, 45, -95, 13, -69, 115, -1, -33, -21, 6, 77, -16, 2, -125, 109, -2, 95, -86, -103, 50, 90, 125, 92, 81, 126, 87, 72, -62, 43, -123, -33, -55, 103, -95, -65, 28, -20, -79, -108, -66, 50, -36, 47, -126, -27, -29, 50, 56, -12, -112, -120, -25, 105, 51, 57, 108, -89, -116, 64, 111, 16, 89, 47, -6, 47, -95, 92, -110, 96, -18, -22, -127, 0, -55, -45, 15, -61, 74, 121, -51, 52, -32, -38, 47, -113, -100, -98, 12, 46, 102, 102, 120, -93, -15, -110, -109, -111, -100, 123, -4, 124, 80, 6, -6, -22, 109, -113, -24, 82, -3, 88, -110, 93, -68, -91, -121, 39, -72, -15, -120, 105, -76, -116, 119, -98, 57, -38, -92, 13, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoDSASignatureFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 8, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, 12, -67, -92, 2, 81, -83, 126, -105, -38, -16, -114, 19, 90, -125, 69, 59, -52, 37, 86, -90, 28, 122, -19, -39, -1, 72, -107, -52, -2, 61, 16, 98, -14, -26, -22, 60, 6, 64, -32, 48, 18, -64, -62, -68, 12, -43, -28, 83, 31, 14, 74, -34, -28, 33, -94, 23, 0, 0, 3, 0, 18, 93, 30, -115, -108, -1, 38, -90, 7, 11, 92, -48, -61, -87, -80, 39, -118, 81, -76, -90, -107, 95, -31, 112, -75, -9, 56, 1, 25, 39, 8, -37, -63, 76, 65, -46, 57, -42, -80, -12, 14, -55, 67, -115, 13, 37, -24, -77, 68, 103, -15, 19, 66, -120, 76, 105, 17, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -58, -34, 0, 6, 0, 0, 0, 0, 1, 0, -113, 121, 53, -39, -71, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 49, 3, 16, -58, -65, -110, 36, 67, 70, -40, 120, -15, -118, 54, -93, 94, 11, -21, -63, -60, 96, -116, 114, -102, 122, 37, 97, -112, 108, -46, -1, 54, -28, -19, -65, -87, 111, 2, -122, -66, -38, 91, 111, 78, -5, 10, -24, -74, -22, 45, -61, -75, -69, 29, 7, 106, -6, -38, -67, 92, 127, 30, 44, -12, 101, -39, 30, 24, -119, -89, 50, 57, -28, 115, 122, 114, -121, -117, -12, 34, 111, -57, -37, -33, -81, -71, -47, -105, -53, 29, -44, -16, -48, -47, -100, -55, 50, 12, 92, -41, 65, -113, 78, 47, -59, -114, -15, -24, -24, -85, 105, 121, -53, 71, -76, -56, -65, -12, 14, 112, -66, 66, -117, -127, 27, 70, -39, 11, -35, 109, -109, -98, 112, -26, 59, -97, -41, 23, 100, 49, -115, -87, 116, -58, -71, -127, 102, -52, -38, -99, 21, -93, 74, 1, -20, 21, 87, -118, -37, 12, 16, -75, -57, -28, 22, -119, 65, -116, 34, -24, -53, -90, -72, -97, 91, 4, 42, -85, 45, -108, -19, -25, -110, -41, 94, -68, 106, 53, -60, -111, -17, 70, -16, 120, 82, 111, 52, 10, 54, 71, 107, -24, -104, 11, -21, 122, -117, -34, 82, -51, -119, 104, -4, 33, 40, 120, 34, 41, -38, -41, -61, 17, -78, 12, -15, 83, -43, -24, 116, -58, -123, -60, -11, -120, -24, -32, -105, -77, 122, 89, 35, -123, 19, 116, -34, 59, -116, 68, -39, 105, 4, 118, -75, 69, 50, -101, 0, 7, 0, 0, 0, 28, 37, -113, -37, -90, -30, 93, 110, 25, 25, 4, -108, -7, 55, 6, -3, 124, -67, 40, 62, -94, -24, 51, -94, 10, 26, -84, 40, -89, 0, 0, 0, 28, 33, 46, 45, 75, -101, 118, -96, 31, 83, 104, -116, 99, 91, 45, -95, 13, -69, 115, -1, -33, -21, 6, 77, -16, 2, -125, 109, -2, 0, 7, 0, 0, 0, 28, 37, -113, -37, -90, -30, 93, 110, 25, 25, 4, -108, -7, 55, 6, -3, 124, -67, 40, 62, -94, -24, 51, -94, 10, 26, -84, 40, -89, 0, 0, 0, 28, 33, 46, 45, 75, -101, 118, -96, 31, 83, 104, -116, 99, 91, 45, -95, 13, -69, 115, -1, -33, -21, 6, 77, -16, 2, -125, 109, -2, 95, -86, -103, 50, 90, 125, 92, 81, 126, 87, 72, -62, 43, -123, -33, -55, 103, -95, -65, 28, -20, -79, -108, -66, 50, -36, 47, -126, -27, -29, 50, 56, -12, -112, -120, -25, 105, 51, 57, 108, -89, -116, 64, 111, 16, 89, 47, -6, 47, -95, 92, -110, 96, -18, -22, -127, 0, -55, -45, 15, -61, 74, 121, -51, 52, -32, -38, 47, -113, -100, -98, 12, 46, 102, 102, 120, -93, -15, -110, -109, -111, -100, 123, -4, 124, 80, 6, -6, -22, 109, -113, -24, 82, -3, 88, -110, 93, -68, -91, -121, 39, -72, -15, -120, 105, -76, -116, 119, -98, 57, -38, -92, 13, 0};
        readFrom(new OtrInputStream(input)).validate();
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingDSASignatureFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, 12, -67, -92, 2, 81, -83, 126, -105, -38, -16, -114, 19, 90, -125, 69, 59, -52, 37, 86, -90, 28, 122, -19, -39, -1, 72, -107, -52, -2, 61, 16, 98, -14, -26, -22, 60, 6, 64, -32, 48, 18, -64, -62, -68, 12, -43, -28, 83, 31, 14, 74, -34, -28, 33, -94, 23, 0, 0, 3, 0, 18, 93, 30, -115, -108, -1, 38, -90, 7, 11, 92, -48, -61, -87, -80, 39, -118, 81, -76, -90, -107, 95, -31, 112, -75, -9, 56, 1, 25, 39, 8, -37, -63, 76, 65, -46, 57, -42, -80, -12, 14, -55, 67, -115, 13, 37, -24, -77, 68, 103, -15, 19, 66, -120, 76, 105, 17, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 91, -44, -58, -34, 0, 6, 0, 0, 0, 0, 1, 0, -113, 121, 53, -39, -71, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 49, 3, 16, -58, -65, -110, 36, 67, 70, -40, 120, -15, -118, 54, -93, 94, 11, -21, -63, -60, 96, -116, 114, -102, 122, 37, 97, -112, 108, -46, -1, 54, -28, -19, -65, -87, 111, 2, -122, -66, -38, 91, 111, 78, -5, 10, -24, -74, -22, 45, -61, -75, -69, 29, 7, 106, -6, -38, -67, 92, 127, 30, 44, -12, 101, -39, 30, 24, -119, -89, 50, 57, -28, 115, 122, 114, -121, -117, -12, 34, 111, -57, -37, -33, -81, -71, -47, -105, -53, 29, -44, -16, -48, -47, -100, -55, 50, 12, 92, -41, 65, -113, 78, 47, -59, -114, -15, -24, -24, -85, 105, 121, -53, 71, -76, -56, -65, -12, 14, 112, -66, 66, -117, -127, 27, 70, -39, 11, -35, 109, -109, -98, 112, -26, 59, -97, -41, 23, 100, 49, -115, -87, 116, -58, -71, -127, 102, -52, -38, -99, 21, -93, 74, 1, -20, 21, 87, -118, -37, 12, 16, -75, -57, -28, 22, -119, 65, -116, 34, -24, -53, -90, -72, -97, 91, 4, 42, -85, 45, -108, -19, -25, -110, -41, 94, -68, 106, 53, -60, -111, -17, 70, -16, 120, 82, 111, 52, 10, 54, 71, 107, -24, -104, 11, -21, 122, -117, -34, 82, -51, -119, 104, -4, 33, 40, 120, 34, 41, -38, -41, -61, 17, -78, 12, -15, 83, -43, -24, 116, -58, -123, -60, -11, -120, -24, -32, -105, -77, 122, 89, 35, -123, 19, 116, -34, 59, -116, 68, -39, 105, 4, 118, -75, 69, 50, -101, 95, -86, -103, 50, 90, 125, 92, 81, 126, 87, 72, -62, 43, -123, -33, -55, 103, -95, -65, 28, -20, -79, -108, -66, 50, -36, 47, -126, -27, -29, 50, 56, -12, -112, -120, -25, 105, 51, 57, 108, -89, -116, 64, 111, 16, 89, 47, -6, 47, -95, 92, -110, 96, -18, -22, -127, 0, -55, -45, 15, -61, 74, 121, -51, 52, -32, -38, 47, -113, -100, -98, 12, 46, 102, 102, 120, -93, -15, -110, -109, -111, -100, 123, -4, 124, 80, 6, -6, -22, 109, -113, -24, 82, -3, 88, -110, 93, -68, -91, -121, 39, -72, -15, -120, 105, -76, -116, 119, -98, 57, -38, -92, 13, 0};
        readFrom(new OtrInputStream(input)).validate();
    }
}